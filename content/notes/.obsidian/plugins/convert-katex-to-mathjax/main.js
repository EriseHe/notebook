/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var B=(t,n,e)=>n in t?h(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var x=(t,n)=>{for(var e in n)h(t,e,{get:n[e],enumerable:!0})},I=(t,n,e,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of T(n))!L.call(t,s)&&s!==e&&h(t,s,{get:()=>n[s],enumerable:!(i=S(n,s))||i.enumerable});return t};var E=t=>I(h({},"__esModule",{value:!0}),t);var f=(t,n,e)=>B(t,typeof n!="symbol"?n+"":n,e);var K={};x(K,{default:()=>m});module.exports=E(K);var u=require("obsidian");var P={enableDefaultPasteConversion:!0,wrapMatrixEnvsInDisplayMath:!0,plainParensAsDelimiters:!1,plainBracketsAsDelimiters:!1,convertBareInlineLatex:!1,wrapBareMathSingleLines:!1},m=class extends u.Plugin{constructor(){super(...arguments);f(this,"settings")}async loadSettings(){this.settings=Object.assign({},P,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),this.addSettingTab(new d(this.app,this)),this.registerEvent(this.app.workspace.on("editor-paste",async(e,i)=>{var r;let s=((r=e.clipboardData)==null?void 0:r.getData("text"))||"",c=s.trim(),l=/^https?:\/\/\S+$/.test(c),a=/^\[.*?\]\(.*?\)$/.test(c),o=/^https?:\/\/[^\s\[]+\[.*?\]\(.*?\)/.test(c);if(!(l||a||o)&&this.settings.enableDefaultPasteConversion&&s){e.preventDefault();let g=p(s,this.settings);i.replaceSelection(g)}})),this.addCommand({id:"paste-katex-to-mathjax",name:"Paste with conversion",editorCallback:e=>{navigator.clipboard.readText().then(i=>{let s=p(i,this.settings);e.replaceSelection(s)})}}),this.addCommand({id:"convert-editor-text-from",name:"Convert current text file",editorCallback:e=>{let i=e.getValue(),s=p(i,this.settings);e.setValue(s)}}),this.addCommand({id:"convert-all-files-from",name:"Convert all files",callback:async()=>{let e=this.app.vault.getMarkdownFiles();for(let i of e){let s=await this.app.vault.read(i),c=p(s,this.settings);await this.app.vault.modify(i,c)}new u.Notice("All Markdown files converted to MathJax-friendly math.")}})}};function p(t,n){let e=t.trim(),i=/^https?:\/\/\S+$/.test(e),s=/^\[.*?\]\(.*?\)$/.test(e),c=/^https?:\/\/[^\s\[]+\[.*?\]\(.*?\)/.test(e);if(i||s||c)return t;let l=/```[\s\S]*?```/g,a=[],o=0,r;for(;(r=l.exec(t))!==null;)r.index>o&&a.push(v(t.slice(o,r.index),n)),a.push(r[0]),o=r.index+r[0].length;return o<t.length&&a.push(v(t.slice(o),n)),F(a.join(""))}function v(t,n){let e=/https?:\/\/[^\s)]+/g,i=[],s=0;for(let c of t.matchAll(e))c.index>s&&i.push(w(t.slice(s,c.index),n)),i.push(c[0]),s=c.index+c[0].length;return s<t.length&&i.push(w(t.slice(s),n)),i.join("")}function w(t,n){return t=t.replace(/\\\((.*?)\\\)/g,(e,i)=>`$${i.trim()}$`),t=t.replace(/\\\[(.*?)\\\]/gs,(e,i)=>`
$$
${i.trim()}
$$
`),t=t.replace(/(^|\n)[ \t]*\[[ \t]*\n([\s\S]*?)\n[ \t]*\][ \t]*(?=\n|$)/g,(e,i,s)=>`${i}$$
${s.trim()}
$$`),n.wrapMatrixEnvsInDisplayMath&&(t=t.replace(/(^|\n)([ \t]*)\\begin\{(bmatrix|pmatrix|vmatrix|Vmatrix|matrix|smallmatrix|cases|array|align|aligned)\}([\s\S]*?)\\end\{\3\}/g,(e,i,s,c,l)=>`${i}$$
${s}\\begin{${c}}${l}\\end{${c}}
$$`)),n.wrapBareMathSingleLines&&(t=z(t)),t=y(t,e=>_(e,n)),n.convertBareInlineLatex&&(t=y(t,e=>V(e))),t}function _(t,n){return n.plainParensAsDelimiters&&(t=D(t,"(",")",Z,n)),n.plainBracketsAsDelimiters&&(t=D(t,"[","]",N,n)),t}function D(t,n,e,i,s){let c="",l=0,a=0,o=-1;for(let r=0;r<t.length;r++){let g=t[r];if(g===n)a===0&&(o=r),a++;else if(g===e&&a>0&&(a--,a===0&&o>=0)){let $=t.slice(o,r+1),b=t.slice(o+1,r).trim(),M=t.slice(Math.max(0,o-60),o),C=t.slice(r+1,Math.min(t.length,r+1+60)),A=i(b,M,C,$)?`$${b}$`:$;c+=t.slice(l,o)+A,l=r+1,o=-1}}return l<t.length&&(c+=t.slice(l)),c}function O(t){let n=[],e=0,i=0,s=!1,c=a=>{let o=a;for(;o>0&&t[o-1]!==`
`&&t[o-1]!=="\r";)o--;let r=a;for(;r<t.length&&t[r]!==`
`&&t[r]!=="\r";)r++;let g=r;return g<t.length&&t[g]==="\r"&&t[g+1]===`
`?g+=2:g<t.length&&(t[g]===`
`||t[g]==="\r")&&(g+=1),{ls:o,le:r,adv:g}},l=a=>{let{ls:o,le:r}=c(a),g=t.slice(o,r);return/^\s*\$\$\s*$/.test(g)};for(;e<t.length;){if(l(e)){e>i&&n.push({inside:s,chunk:t.slice(i,e)});let{adv:a}=c(e);n.push({inside:!0,chunk:t.slice(e,a)}),s=!s,e=a,i=e;continue}if(t[e]==="$"&&t[e+1]==="$"){e>i&&n.push({inside:s,chunk:t.slice(i,e)});let a=e+2;for(;a+1<t.length&&!(t[a]==="$"&&t[a+1]==="$");)a++;if(a+1>=t.length)return n.push({inside:s,chunk:t.slice(e)}),n;n.push({inside:!0,chunk:t.slice(e,a+2)}),e=a+2,i=e;continue}e++}return i<t.length&&n.push({inside:s,chunk:t.slice(i)}),n}function y(t,n){return O(t).map(e=>e.inside?e.chunk:n(e.chunk)).join("")}function z(t){let n=t.split(/(\$\$[\s\S]*?\$\$)/g);for(let e=0;e<n.length;e+=2)n[e]=j(n[e]);return n.join("")}function j(t){let n=t.split(/\r?\n/),e=[],i=l=>/^(\*{3,}|-{3,}|_{3,})$/.test(l),s=l=>l.trim()==="$$",c=l=>{if(/\$/.test(l))return!1;let a=l.trim();if(!a||/^#{1,6}\s/.test(a)||/^[-*•]\s+/.test(a)||i(a)||/^\$.*\$$/.test(a)||/^\$\$[\s\S]*\$\$$/.test(a))return!1;let o=/[=^_]/.test(a)||/\\[A-Za-z]+/.test(a)||/[+\-*/]/.test(a),r=(a.match(/\b[A-Za-z]{2,}\b/g)||[]).length;return o&&r<=4};for(let l=0;l<n.length;l++){let a=n[l].trim(),o=l>0&&s(n[l-1].trim()),r=l+1<n.length&&s(n[l+1].trim());c(n[l])&&!o&&!r?e.push("$$",n[l].trimEnd(),"$$"):e.push(n[l])}return e.join(`
`)}function V(t){return/^\s*\$\$\s*$/m.test(t)||(t=t.replace(/(?<!\$)\b(\d+)\s*\^\s*\\circ\b(?!\$)/g,(n,e)=>`$${e}^{\\circ}$`),t=t.replace(/(?<!\$)(\\sqrt\s*\{[^}]+\})(?!\$)/g,(n,e)=>`$${e}$`),t=t.replace(/(?<!\$)(\\frac\s*\{[^}]+\}\s*\{[^}]+\})(?!\$)/g,(n,e)=>`$${e}$`),t=t.replace(/(?<!\$)\b([A-Za-z])\s*([_^])\s*([A-Za-z0-9]+)\b(?=\s*[=+\-*/,:;.)]|$)(?!\$)/g,(n,e,i,s)=>`$${e}${i}${s}$`)),t}function Z(t,n,e,i){return/^(?:[a-z]|[ivxlcdm]+|\d+)\)?\s*(?:$|[,\.;:!?\u2013\u2014-]\s)/i.test(t)||/^(?:note|notes|see|ref|fig|figure|table|section|chapter|appendix)\b/i.test(t)?!1:!!(k(t)||/^[A-Za-z]$/.test(t)&&R(n,e))}function N(t,n,e,i){return/^!?\[.*\]\(.*\)$/.test(n+i+e)||/^\^[^\]]+$/.test(t)||/^\s*!\s*[^[]/.test(n)?!1:k(t)}function R(t,n){let e=(t+" "+n).slice(-120);return!!(/[\\=_^]|[\u2200-\u22FF]/.test(e)||/\b(ODE|PDE|Fourier|Taylor|polynomial|series|equation|matrix|vector|operator|rank|dimension|basis|eigen|SVD|distribution|probability|variance|expectation|gradient|divergence|curl)\b/i.test(e)||/^\s*(?:-?\s*order|th|st|nd|rd|dim|degree|term|mode|harmonic|eigen|component)\b/i.test(n))}function k(t){return!!(/[\\]/.test(t)||/[=_^]/.test(t)||/[+\-*/]/.test(t)&&/[A-Za-z0-9]/.test(t)||/[⟨⟩]/.test(t)||/‖[^‖]+‖/.test(t)||/[≤≥≈≃≅≡≠→↦↔⇒⇔∝∞∑∫√∂∇∈∉⊂⊆⊃⊇∪∩∀∃]/.test(t)||/\b(sin|cos|tan|cot|sec|csc|log|ln|exp|min|max|arg|min|max|sup|inf|det|rank|tr|trace|diag|span|null|range|im|ker|dim)\b/.test(t)||/\\(mathbb|mathcal|mathrm|mathbf|mathit|mathtt|boldsymbol|bm)\s*\{[A-Za-z0-9]+\}/.test(t)||/\\text\s*\{[^}]+\}/.test(t)||/\\operatorname\s*\{[^}]+\}/.test(t)||/\\(alpha|beta|gamma|delta|epsilon|varepsilon|zeta|eta|theta|vartheta|iota|kappa|lambda|mu|nu|xi|pi|varpi|rho|sigma|varsigma|tau|upsilon|phi|varphi|chi|psi|omega|partial|nabla|sum|int|prod|frac|sqrt|binom|cdot|times|div|over|lim|to|infty)\b/.test(t)||/\\begin\{(?:bmatrix|pmatrix|vmatrix|Vmatrix|matrix|smallmatrix|cases|array|align|aligned|gather|split)\}/.test(t)||/\[[^[\]]+,[^[\]]+\]/.test(t)&&/[A-Za-z0-9]/.test(t)||/[A-Za-z]\s*[_^]\s*[0-9A-Za-z]/.test(t)||/[A-Za-z]\s*\([^)]*\)/.test(t))}function F(t){return t.replace(/(?:^|\n)[ \t]*\n[ \t]*(?=\$\$)/g,`
`).replace(/(?<=\$\$)\n[ \t]*\n/g,`
`)}var d=class extends u.PluginSettingTab{constructor(e,i){super(e,i);f(this,"plugin");this.plugin=i}display(){let{containerEl:e}=this;e.empty(),new u.Setting(e).setName("Enable default paste conversion").setDesc("Automatically converts KaTeX/ChatGPT-style math on paste.").addToggle(i=>i.setValue(this.plugin.settings.enableDefaultPasteConversion).onChange(async s=>{this.plugin.settings.enableDefaultPasteConversion=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Wrap matrix/align environments in $$ \u2026 $$").setDesc("If ChatGPT pastes bare \\begin{bmatrix}/align/etc., wrap as display math.").addToggle(i=>i.setValue(this.plugin.settings.wrapMatrixEnvsInDisplayMath).onChange(async s=>{this.plugin.settings.wrapMatrixEnvsInDisplayMath=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Treat plain parentheses ( \u2026 ) as math").setDesc("Convert OUTERMOST ( \u2026 ) to $\u2026$ if contents look LaTeX-like.").addToggle(i=>i.setValue(this.plugin.settings.plainParensAsDelimiters).onChange(async s=>{this.plugin.settings.plainParensAsDelimiters=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Treat plain brackets [ \u2026 ] as math").setDesc("Convert OUTERMOST [ \u2026 ] to $\u2026$ if contents look LaTeX-like.").addToggle(i=>i.setValue(this.plugin.settings.plainBracketsAsDelimiters).onChange(async s=>{this.plugin.settings.plainBracketsAsDelimiters=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Convert bare inline LaTeX").setDesc("Wrap inline tokens like 90^\\circ, \\sqrt{\u2026}, \\frac{\u2026}{\u2026}, x_i into $\u2026$.").addToggle(i=>i.setValue(this.plugin.settings.convertBareInlineLatex).onChange(async s=>{this.plugin.settings.convertBareInlineLatex=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Wrap single math lines into $$ \u2026 $$").setDesc("Convert isolated math-heavy lines (e.g., a^2 + b^2 = c^2) into display math.").addToggle(i=>i.setValue(this.plugin.settings.wrapBareMathSingleLines).onChange(async s=>{this.plugin.settings.wrapBareMathSingleLines=s,await this.plugin.saveSettings()}))}};

/* nosourcemap */